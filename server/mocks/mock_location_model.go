// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliparlakci/country-roads/models (interfaces: LocationFinder,LocationInserter,LocationRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aliparlakci/country-roads/models"
	gomock "github.com/golang/mock/gomock"
)

// MockLocationFinder is a mock of LocationFinder interface.
type MockLocationFinder struct {
	ctrl     *gomock.Controller
	recorder *MockLocationFinderMockRecorder
}

// MockLocationFinderMockRecorder is the mock recorder for MockLocationFinder.
type MockLocationFinderMockRecorder struct {
	mock *MockLocationFinder
}

// NewMockLocationFinder creates a new mock instance.
func NewMockLocationFinder(ctrl *gomock.Controller) *MockLocationFinder {
	mock := &MockLocationFinder{ctrl: ctrl}
	mock.recorder = &MockLocationFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationFinder) EXPECT() *MockLocationFinderMockRecorder {
	return m.recorder
}

// FindMany mocks base method.
func (m *MockLocationFinder) FindMany(arg0 context.Context, arg1 interface{}) (models.Locations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", arg0, arg1)
	ret0, _ := ret[0].(models.Locations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockLocationFinderMockRecorder) FindMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockLocationFinder)(nil).FindMany), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockLocationFinder) FindOne(arg0 context.Context, arg1 interface{}) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockLocationFinderMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockLocationFinder)(nil).FindOne), arg0, arg1)
}

// MockLocationInserter is a mock of LocationInserter interface.
type MockLocationInserter struct {
	ctrl     *gomock.Controller
	recorder *MockLocationInserterMockRecorder
}

// MockLocationInserterMockRecorder is the mock recorder for MockLocationInserter.
type MockLocationInserterMockRecorder struct {
	mock *MockLocationInserter
}

// NewMockLocationInserter creates a new mock instance.
func NewMockLocationInserter(ctrl *gomock.Controller) *MockLocationInserter {
	mock := &MockLocationInserter{ctrl: ctrl}
	mock.recorder = &MockLocationInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationInserter) EXPECT() *MockLocationInserterMockRecorder {
	return m.recorder
}

// InsertOne mocks base method.
func (m *MockLocationInserter) InsertOne(arg0 context.Context, arg1 models.LocationSchema) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockLocationInserterMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockLocationInserter)(nil).InsertOne), arg0, arg1)
}

// MockLocationRepository is a mock of LocationRepository interface.
type MockLocationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLocationRepositoryMockRecorder
}

// MockLocationRepositoryMockRecorder is the mock recorder for MockLocationRepository.
type MockLocationRepositoryMockRecorder struct {
	mock *MockLocationRepository
}

// NewMockLocationRepository creates a new mock instance.
func NewMockLocationRepository(ctrl *gomock.Controller) *MockLocationRepository {
	mock := &MockLocationRepository{ctrl: ctrl}
	mock.recorder = &MockLocationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationRepository) EXPECT() *MockLocationRepositoryMockRecorder {
	return m.recorder
}

// FindMany mocks base method.
func (m *MockLocationRepository) FindMany(arg0 context.Context, arg1 interface{}) (models.Locations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", arg0, arg1)
	ret0, _ := ret[0].(models.Locations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockLocationRepositoryMockRecorder) FindMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockLocationRepository)(nil).FindMany), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockLocationRepository) FindOne(arg0 context.Context, arg1 interface{}) (models.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(models.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockLocationRepositoryMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockLocationRepository)(nil).FindOne), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockLocationRepository) InsertOne(arg0 context.Context, arg1 models.LocationSchema) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockLocationRepositoryMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockLocationRepository)(nil).InsertOne), arg0, arg1)
}
