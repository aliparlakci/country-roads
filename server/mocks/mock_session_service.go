// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliparlakci/country-roads/services (interfaces: SessionService,SessionFetcher,SessionUpdater,SessionCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	services "github.com/aliparlakci/country-roads/services"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepository is a mock of SessionService interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionRepository) CreateSession(arg0 context.Context, arg1 services.Session) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionRepositoryMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionRepository)(nil).CreateSession), arg0, arg1)
}

// FetchSession mocks base method.
func (m *MockSessionRepository) FetchSession(arg0 context.Context, arg1 string) (services.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSession", arg0, arg1)
	ret0, _ := ret[0].(services.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSession indicates an expected call of FetchSession.
func (mr *MockSessionRepositoryMockRecorder) FetchSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSession", reflect.TypeOf((*MockSessionRepository)(nil).FetchSession), arg0, arg1)
}

// Lock mocks base method.
func (m *MockSessionRepository) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockSessionRepositoryMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockSessionRepository)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockSessionRepository) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockSessionRepositoryMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockSessionRepository)(nil).Unlock))
}

// UpdateSession mocks base method.
func (m *MockSessionRepository) UpdateSession(arg0 context.Context, arg1 string, arg2 services.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockSessionRepositoryMockRecorder) UpdateSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockSessionRepository)(nil).UpdateSession), arg0, arg1, arg2)
}

// MockSessionFetcher is a mock of SessionFetcher interface.
type MockSessionFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSessionFetcherMockRecorder
}

// MockSessionFetcherMockRecorder is the mock recorder for MockSessionFetcher.
type MockSessionFetcherMockRecorder struct {
	mock *MockSessionFetcher
}

// NewMockSessionFetcher creates a new mock instance.
func NewMockSessionFetcher(ctrl *gomock.Controller) *MockSessionFetcher {
	mock := &MockSessionFetcher{ctrl: ctrl}
	mock.recorder = &MockSessionFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionFetcher) EXPECT() *MockSessionFetcherMockRecorder {
	return m.recorder
}

// FetchSession mocks base method.
func (m *MockSessionFetcher) FetchSession(arg0 context.Context, arg1 string) (services.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSession", arg0, arg1)
	ret0, _ := ret[0].(services.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSession indicates an expected call of FetchSession.
func (mr *MockSessionFetcherMockRecorder) FetchSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSession", reflect.TypeOf((*MockSessionFetcher)(nil).FetchSession), arg0, arg1)
}

// Lock mocks base method.
func (m *MockSessionFetcher) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockSessionFetcherMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockSessionFetcher)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockSessionFetcher) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockSessionFetcherMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockSessionFetcher)(nil).Unlock))
}

// MockSessionUpdater is a mock of SessionUpdater interface.
type MockSessionUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUpdaterMockRecorder
}

// MockSessionUpdaterMockRecorder is the mock recorder for MockSessionUpdater.
type MockSessionUpdaterMockRecorder struct {
	mock *MockSessionUpdater
}

// NewMockSessionUpdater creates a new mock instance.
func NewMockSessionUpdater(ctrl *gomock.Controller) *MockSessionUpdater {
	mock := &MockSessionUpdater{ctrl: ctrl}
	mock.recorder = &MockSessionUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUpdater) EXPECT() *MockSessionUpdaterMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockSessionUpdater) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockSessionUpdaterMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockSessionUpdater)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockSessionUpdater) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockSessionUpdaterMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockSessionUpdater)(nil).Unlock))
}

// UpdateSession mocks base method.
func (m *MockSessionUpdater) UpdateSession(arg0 context.Context, arg1 string, arg2 services.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockSessionUpdaterMockRecorder) UpdateSession(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockSessionUpdater)(nil).UpdateSession), arg0, arg1, arg2)
}

// MockSessionCreator is a mock of SessionCreator interface.
type MockSessionCreator struct {
	ctrl     *gomock.Controller
	recorder *MockSessionCreatorMockRecorder
}

// MockSessionCreatorMockRecorder is the mock recorder for MockSessionCreator.
type MockSessionCreatorMockRecorder struct {
	mock *MockSessionCreator
}

// NewMockSessionCreator creates a new mock instance.
func NewMockSessionCreator(ctrl *gomock.Controller) *MockSessionCreator {
	mock := &MockSessionCreator{ctrl: ctrl}
	mock.recorder = &MockSessionCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionCreator) EXPECT() *MockSessionCreatorMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionCreator) CreateSession(arg0 context.Context, arg1 services.Session) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionCreatorMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionCreator)(nil).CreateSession), arg0, arg1)
}

// Lock mocks base method.
func (m *MockSessionCreator) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock.
func (mr *MockSessionCreatorMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockSessionCreator)(nil).Lock))
}

// Unlock mocks base method.
func (m *MockSessionCreator) Unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unlock")
}

// Unlock indicates an expected call of Unlock.
func (mr *MockSessionCreatorMockRecorder) Unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockSessionCreator)(nil).Unlock))
}
