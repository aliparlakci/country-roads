// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliparlakci/country-roads/services (interfaces: SessionService,SessionFetcher,SessionRevoker,SessionCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionService) CreateSession(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionServiceMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionService)(nil).CreateSession), arg0, arg1)
}

// FetchSession mocks base method.
func (m *MockSessionService) FetchSession(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSession indicates an expected call of FetchSession.
func (mr *MockSessionServiceMockRecorder) FetchSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSession", reflect.TypeOf((*MockSessionService)(nil).FetchSession), arg0, arg1)
}

// RevokeSession mocks base method.
func (m *MockSessionService) RevokeSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockSessionServiceMockRecorder) RevokeSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockSessionService)(nil).RevokeSession), arg0, arg1)
}

// MockSessionFetcher is a mock of SessionFetcher interface.
type MockSessionFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockSessionFetcherMockRecorder
}

// MockSessionFetcherMockRecorder is the mock recorder for MockSessionFetcher.
type MockSessionFetcherMockRecorder struct {
	mock *MockSessionFetcher
}

// NewMockSessionFetcher creates a new mock instance.
func NewMockSessionFetcher(ctrl *gomock.Controller) *MockSessionFetcher {
	mock := &MockSessionFetcher{ctrl: ctrl}
	mock.recorder = &MockSessionFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionFetcher) EXPECT() *MockSessionFetcherMockRecorder {
	return m.recorder
}

// FetchSession mocks base method.
func (m *MockSessionFetcher) FetchSession(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSession indicates an expected call of FetchSession.
func (mr *MockSessionFetcherMockRecorder) FetchSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSession", reflect.TypeOf((*MockSessionFetcher)(nil).FetchSession), arg0, arg1)
}

// MockSessionRevoker is a mock of SessionRevoker interface.
type MockSessionRevoker struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRevokerMockRecorder
}

// MockSessionRevokerMockRecorder is the mock recorder for MockSessionRevoker.
type MockSessionRevokerMockRecorder struct {
	mock *MockSessionRevoker
}

// NewMockSessionRevoker creates a new mock instance.
func NewMockSessionRevoker(ctrl *gomock.Controller) *MockSessionRevoker {
	mock := &MockSessionRevoker{ctrl: ctrl}
	mock.recorder = &MockSessionRevokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRevoker) EXPECT() *MockSessionRevokerMockRecorder {
	return m.recorder
}

// RevokeSession mocks base method.
func (m *MockSessionRevoker) RevokeSession(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSession indicates an expected call of RevokeSession.
func (mr *MockSessionRevokerMockRecorder) RevokeSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSession", reflect.TypeOf((*MockSessionRevoker)(nil).RevokeSession), arg0, arg1)
}

// MockSessionCreator is a mock of SessionCreator interface.
type MockSessionCreator struct {
	ctrl     *gomock.Controller
	recorder *MockSessionCreatorMockRecorder
}

// MockSessionCreatorMockRecorder is the mock recorder for MockSessionCreator.
type MockSessionCreatorMockRecorder struct {
	mock *MockSessionCreator
}

// NewMockSessionCreator creates a new mock instance.
func NewMockSessionCreator(ctrl *gomock.Controller) *MockSessionCreator {
	mock := &MockSessionCreator{ctrl: ctrl}
	mock.recorder = &MockSessionCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionCreator) EXPECT() *MockSessionCreatorMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockSessionCreator) CreateSession(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockSessionCreatorMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockSessionCreator)(nil).CreateSession), arg0, arg1)
}
