// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aliparlakci/country-roads/models (interfaces: UserRepository,UserFinder,UserInserter,UserUpdater,UserFindUpdater,UserFindInserter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aliparlakci/country-roads/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockUserRepository) FindOne(arg0 context.Context, arg1 interface{}) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockUserRepositoryMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserRepository)(nil).FindOne), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockUserRepository) InsertOne(arg0 context.Context, arg1 models.UserSchema) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockUserRepositoryMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockUserRepository)(nil).InsertOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockUserRepository) UpdateOne(arg0 context.Context, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockUserRepositoryMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockUserRepository)(nil).UpdateOne), arg0, arg1, arg2)
}

// MockUserFinder is a mock of UserFinder interface.
type MockUserFinder struct {
	ctrl     *gomock.Controller
	recorder *MockUserFinderMockRecorder
}

// MockUserFinderMockRecorder is the mock recorder for MockUserFinder.
type MockUserFinderMockRecorder struct {
	mock *MockUserFinder
}

// NewMockUserFinder creates a new mock instance.
func NewMockUserFinder(ctrl *gomock.Controller) *MockUserFinder {
	mock := &MockUserFinder{ctrl: ctrl}
	mock.recorder = &MockUserFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFinder) EXPECT() *MockUserFinderMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockUserFinder) FindOne(arg0 context.Context, arg1 interface{}) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockUserFinderMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserFinder)(nil).FindOne), arg0, arg1)
}

// MockUserInserter is a mock of UserInserter interface.
type MockUserInserter struct {
	ctrl     *gomock.Controller
	recorder *MockUserInserterMockRecorder
}

// MockUserInserterMockRecorder is the mock recorder for MockUserInserter.
type MockUserInserterMockRecorder struct {
	mock *MockUserInserter
}

// NewMockUserInserter creates a new mock instance.
func NewMockUserInserter(ctrl *gomock.Controller) *MockUserInserter {
	mock := &MockUserInserter{ctrl: ctrl}
	mock.recorder = &MockUserInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInserter) EXPECT() *MockUserInserterMockRecorder {
	return m.recorder
}

// InsertOne mocks base method.
func (m *MockUserInserter) InsertOne(arg0 context.Context, arg1 models.UserSchema) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockUserInserterMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockUserInserter)(nil).InsertOne), arg0, arg1)
}

// MockUserUpdater is a mock of UserUpdater interface.
type MockUserUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUserUpdaterMockRecorder
}

// MockUserUpdaterMockRecorder is the mock recorder for MockUserUpdater.
type MockUserUpdaterMockRecorder struct {
	mock *MockUserUpdater
}

// NewMockUserUpdater creates a new mock instance.
func NewMockUserUpdater(ctrl *gomock.Controller) *MockUserUpdater {
	mock := &MockUserUpdater{ctrl: ctrl}
	mock.recorder = &MockUserUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUpdater) EXPECT() *MockUserUpdaterMockRecorder {
	return m.recorder
}

// UpdateOne mocks base method.
func (m *MockUserUpdater) UpdateOne(arg0 context.Context, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockUserUpdaterMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockUserUpdater)(nil).UpdateOne), arg0, arg1, arg2)
}

// MockUserFindUpdater is a mock of UserFindUpdater interface.
type MockUserFindUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUserFindUpdaterMockRecorder
}

// MockUserFindUpdaterMockRecorder is the mock recorder for MockUserFindUpdater.
type MockUserFindUpdaterMockRecorder struct {
	mock *MockUserFindUpdater
}

// NewMockUserFindUpdater creates a new mock instance.
func NewMockUserFindUpdater(ctrl *gomock.Controller) *MockUserFindUpdater {
	mock := &MockUserFindUpdater{ctrl: ctrl}
	mock.recorder = &MockUserFindUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFindUpdater) EXPECT() *MockUserFindUpdaterMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockUserFindUpdater) FindOne(arg0 context.Context, arg1 interface{}) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockUserFindUpdaterMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserFindUpdater)(nil).FindOne), arg0, arg1)
}

// UpdateOne mocks base method.
func (m *MockUserFindUpdater) UpdateOne(arg0 context.Context, arg1, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockUserFindUpdaterMockRecorder) UpdateOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockUserFindUpdater)(nil).UpdateOne), arg0, arg1, arg2)
}

// MockUserFindInserter is a mock of UserFindInserter interface.
type MockUserFindInserter struct {
	ctrl     *gomock.Controller
	recorder *MockUserFindInserterMockRecorder
}

// MockUserFindInserterMockRecorder is the mock recorder for MockUserFindInserter.
type MockUserFindInserterMockRecorder struct {
	mock *MockUserFindInserter
}

// NewMockUserFindInserter creates a new mock instance.
func NewMockUserFindInserter(ctrl *gomock.Controller) *MockUserFindInserter {
	mock := &MockUserFindInserter{ctrl: ctrl}
	mock.recorder = &MockUserFindInserterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFindInserter) EXPECT() *MockUserFindInserterMockRecorder {
	return m.recorder
}

// FindOne mocks base method.
func (m *MockUserFindInserter) FindOne(arg0 context.Context, arg1 interface{}) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockUserFindInserterMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockUserFindInserter)(nil).FindOne), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockUserFindInserter) InsertOne(arg0 context.Context, arg1 models.UserSchema) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockUserFindInserterMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockUserFindInserter)(nil).InsertOne), arg0, arg1)
}
