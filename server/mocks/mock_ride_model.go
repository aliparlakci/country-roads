// Code generated by MockGen. DO NOT EDIT.
// Source: example.com/country-roads/models (interfaces: RideRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "example.com/country-roads/models"
	schemas "example.com/country-roads/schemas"
	gomock "github.com/golang/mock/gomock"
)

// MockRideRepository is a mock of RideRepository interface.
type MockRideRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRideRepositoryMockRecorder
}

// MockRideRepositoryMockRecorder is the mock recorder for MockRideRepository.
type MockRideRepositoryMockRecorder struct {
	mock *MockRideRepository
}

// NewMockRideRepository creates a new mock instance.
func NewMockRideRepository(ctrl *gomock.Controller) *MockRideRepository {
	mock := &MockRideRepository{ctrl: ctrl}
	mock.recorder = &MockRideRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRideRepository) EXPECT() *MockRideRepositoryMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockRideRepository) DeleteOne(arg0 context.Context, arg1 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockRideRepositoryMockRecorder) DeleteOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockRideRepository)(nil).DeleteOne), arg0, arg1)
}

// FindMany mocks base method.
func (m *MockRideRepository) FindMany(arg0 context.Context, arg1 interface{}) ([]models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", arg0, arg1)
	ret0, _ := ret[0].([]models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockRideRepositoryMockRecorder) FindMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockRideRepository)(nil).FindMany), arg0, arg1)
}

// FindOne mocks base method.
func (m *MockRideRepository) FindOne(arg0 context.Context, arg1 interface{}) (models.Ride, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", arg0, arg1)
	ret0, _ := ret[0].(models.Ride)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockRideRepositoryMockRecorder) FindOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockRideRepository)(nil).FindOne), arg0, arg1)
}

// InsertOne mocks base method.
func (m *MockRideRepository) InsertOne(arg0 context.Context, arg1 schemas.RideSchema) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockRideRepositoryMockRecorder) InsertOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockRideRepository)(nil).InsertOne), arg0, arg1)
}
